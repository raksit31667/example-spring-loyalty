plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.unbroken-dome.test-sets' version '4.0.0'
    id 'com.gorylenko.gradle-git-properties' version '2.3.2'
}

repositories {
    mavenCentral()
    maven { url 'https://plugins.gradle.org/m2' }
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

def semanticVersion = System.getenv("SEMANTIC_VERSION")

group = 'com.raksit.example'
version = semanticVersion == null ? '0.0.1-SNAPSHOT' : semanticVersion

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.1.0'
    implementation 'org.springframework.cloud:spring-cloud-openfeign-core:3.1.0'
    implementation 'io.github.openfeign:feign-micrometer:11.8'
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.projectlombok:lombok:1.18.22'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.0.1'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.9.0'
    implementation 'dev.akkinoc.spring.boot:logback-access-spring-boot-starter:3.2.1'
    implementation 'io.awspring.cloud:spring-cloud-starter-aws'
    implementation 'com.amazonaws:aws-java-sdk-sts:1.12.141'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'io.zonky.test:embedded-database-spring-test:2.1.1'
    testImplementation 'org.flywaydb.flyway-test-extensions:flyway-spring-test:7.0.0'
    testImplementation 'org.mock-server:mockserver-netty:5.11.2'
    testImplementation 'org.testcontainers:localstack:1.16.2'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
}

processResources {
    filesMatching('application.yaml') {
        expand(project.properties)
    }
}

testSets {
    integrationTest {
        dirName = 'integration-test'
    }
}

test {
    testLogging.showStandardStreams = false
    useJUnitPlatform()

    testLogging {
        events 'passed', 'skipped', 'failed'
    }
    reports {
        html.enabled = true
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    finalizedBy jacocoTestReport
}

integrationTest {
    testLogging.showStandardStreams = false
    useJUnitPlatform()

    testLogging {
        events 'passed', 'skipped', 'failed'
    }
    reports {
        html.enabled = true
    }
    environment('AWS_REGION', 'ap-southeast-1')
}

bootRun {
    if (System.properties.containsKey('spring.profiles.active')) {
        systemProperty 'spring.profiles.active', System.properties['spring.profiles.active']
    } else {
        systemProperty 'spring.profiles.active', 'local'
    }
}

checkstyle {
    toolVersion = "8.33"
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    maxErrors = 0
    maxWarnings = 0
    reportsDir = file("$project.buildDir/reports/checkstyle")
}

pmd {
    toolVersion = "6.21.0"
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = ["java-basic", "java-braces"]
}

jacoco {
    toolVersion = '0.8.7'
    reportsDir = file("$buildDir/reports/jacoco")
}

def jacocoExcludedClasses = [
        "com/raksit/example/loyalty/LoyaltyBatchJobApplication*",
        "com/raksit/example/loyalty/user/*",
        "com/raksit/example/loyalty/job/configuration/*",
        "com/raksit/example/loyalty/job/launcher/JobLauncherController*",
        "com/raksit/example/loyalty/job/listener/*",
        "com/raksit/example/loyalty/job/writer/*",
        "com/raksit/example/loyalty/legacy/*"
]

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
    classDirectories.setFrom(classDirectories.files.collect {
        fileTree(dir: it, exclude: jacocoExcludedClasses)
    })
}

jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = false
        html.destination file("$buildDir/reports/jacoco")
    }
    afterEvaluate {
        classDirectories.setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludedClasses)
        })
    }
}

task zipReports(type: Zip) {
    archiveFileName = "${rootProject.name}-${project.name}-reports.zip"
    destinationDirectory = file("$buildDir/check-reports")

    from("$buildDir/reports")
}

zipReports {
    dependsOn check
}

check.dependsOn(jacocoTestCoverageVerification, integrationTest)
test.shouldRunAfter(pmdMain)
integrationTest.shouldRunAfter(jacocoTestCoverageVerification)
jacocoTestReport.dependsOn(test)
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

