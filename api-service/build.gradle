plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.unbroken-dome.test-sets' version '4.0.0'
    id 'com.gorylenko.gradle-git-properties' version '2.3.2'
    id 'com.gtramontina.ghooks.gradle' version '1.1.0'
    id 'info.solidsoft.pitest' version '1.7.0'
}

repositories {
    mavenCentral()
    maven { url 'https://plugins.gradle.org/m2' }
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    maven {
        url = uri("https://maven.pkg.github.com/raksit31667/example-spring-loyalty-feature-toggle")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

def semanticVersion = System.getenv("SEMANTIC_VERSION")

group = 'com.raksit.example'
version = semanticVersion == null ? '0.0.1-SNAPSHOT' : semanticVersion

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql:42.4.1'
    implementation 'org.projectlombok:lombok:1.18.22'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.0'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.0.1'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.9.0'
    implementation 'dev.akkinoc.spring.boot:logback-access-spring-boot-starter:3.2.1'
    implementation 'io.opentracing.contrib:opentracing-spring-jaeger-cloud-starter:3.3.1'
    implementation 'io.awspring.cloud:spring-cloud-starter-aws'
    implementation platform('software.amazon.awssdk:bom:2.15.0')
    implementation 'software.amazon.awssdk:kinesis'
    implementation 'software.amazon.awssdk:s3'
    implementation ('org.springframework.cloud:spring-cloud-stream-binder-kinesis:2.2.0') {
        exclude group: 'org.apache.avro', module: 'avro'
        exclude group: 'org.apache.thrift', module: 'libthrift'
        exclude group: 'org.apache.avro', module: 'avro'
        exclude group: 'org.apache.avro', module: 'avro'
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }
    implementation 'com.raksit.example:example-spring-loyalty-feature-toggle:0.0.9'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
    testImplementation 'org.mockito:mockito-inline:4.6.0'
    testImplementation 'org.testcontainers:postgresql:1.17.2'
    testImplementation 'org.testcontainers:localstack:1.16.2'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    // Security patch
    implementation 'org.springframework.cloud:spring-cloud-function-core:3.2.6'
    implementation 'org.springframework.cloud:spring-cloud-function-context:3.2.6'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.263'
}

task zipReports(type: Zip) {
    archiveFileName = "${rootProject.name}-${project.name}-reports.zip"
    destinationDirectory = file("$buildDir/check-reports")

    from("$buildDir/reports")
}

processResources {
    filesMatching('application.yaml') {
        expand(project.properties)
    }
}

testSets {
    integrationTest {
        dirName = 'integration-test'
    }
}

test {
    testLogging.showStandardStreams = false
    useJUnitPlatform()

    testLogging {
        events 'passed', 'skipped', 'failed'
    }
    reports {
        html.enabled = true
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    finalizedBy jacocoTestReport
}

integrationTest {
    testLogging.showStandardStreams = false
    useJUnitPlatform()

    testLogging {
        events 'passed', 'skipped', 'failed'
    }
    reports {
        html.enabled = true
    }
}

pitest {
    excludedClasses = [
            "com.raksit.example.loyalty.LoyaltyApplication*",
            "com.raksit.example.loyalty.user.controller.*",
            "com.raksit.example.loyalty.user.dto.*",
            "com.raksit.example.loyalty.config.*",
            "com.raksit.example.loyalty.error.ErrorResponse*",
            "com.raksit.example.loyalty.feature.*",
            "com.raksit.example.loyalty.activity.event.*",
            "com.raksit.example.loyalty.transaction.entity.*",
            "com.raksit.example.loyalty.metric.*",
            "com.raksit.example.loyalty.tracing.LogCorrelationConfiguration*",
            "com.raksit.example.loyalty.tracing.NoopTracerConfiguration*"
    ]
    junit5PluginVersion = '0.15'
    outputFormats = ['HTML']
    timestampedReports = false
}

bootRun {
    if (System.properties.containsKey('spring.profiles.active')) {
        systemProperty 'spring.profiles.active', System.properties['spring.profiles.active']
    } else {
        systemProperty 'spring.profiles.active', 'local'
    }
}

checkstyle {
    toolVersion = "8.33"
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    maxErrors = 0
    maxWarnings = 0
    reportsDir = file("$project.buildDir/reports/checkstyle")
}

pmd {
    toolVersion = "6.21.0"
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = ["java-basic", "java-braces"]
}

jacoco {
    toolVersion = '0.8.7'
    reportsDir = file("$buildDir/reports/jacoco")
}

def jacocoExcludedClasses = [
        "com/raksit/example/loyalty/LoyaltyApplication*",
        "com/raksit/example/loyalty/user/dto/*",
        "com/raksit/example/loyalty/config/*",
        "com/raksit/example/loyalty/error/ErrorResponse*",
        "com/raksit/example/loyalty/feature/SplitClientConfiguration*",
        "com/raksit/example/loyalty/activity/event/*",
        "com/raksit/example/loyalty/transaction/entity/*",
        "com/raksit/example/loyalty/metric/*",
        "com/raksit/example/loyalty/tracing/LogCorrelationConfiguration*"
]

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
    classDirectories.setFrom(classDirectories.files.collect {
        fileTree(dir: it, exclude: jacocoExcludedClasses)
    })
}

jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = false
        html.destination file("$buildDir/reports/jacoco")
    }
    afterEvaluate {
        classDirectories.setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludedClasses)
        })
    }
    finalizedBy zipReports
}

check.dependsOn(jacocoTestCoverageVerification, integrationTest)
test.shouldRunAfter(pmdMain)
integrationTest.shouldRunAfter(jacocoTestCoverageVerification)
jacocoTestReport.dependsOn(test)
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

